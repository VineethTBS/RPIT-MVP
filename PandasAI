from pandasai.llm.local_llm import LocalLLM  # Importing LocalLLM for local Meta Llama 3 model
import streamlit as st
import pandas as pd  # Pandas for data manipulation
from pandasai import SmartDataframe  # SmartDataframe for interacting with data using LLM
import openpyxl  # Library for working with Excel files

# Function to chat with CSV data
def chat_with_csv(df, query):
    # Initialize LocalLLM with Meta Llama 3 model
    llm = LocalLLM(
        api_base="http://localhost:11434/v1",
        model="llama3"
    )
    # Initialize SmartDataframe with DataFrame and LLM configuration
    pandas_ai = SmartDataframe(df, config={"llm": llm})
    # Chat with the DataFrame using the provided query
    result = pandas_ai.chat(query)
    return result

# Function to extract Excel formulas from the first row of each column
def extract_excel_formulas(file):
    wb = openpyxl.load_workbook(file, data_only=False)  # Load the workbook without evaluating formulas
    sheet = wb.active  # Assume we are working with the active sheet
    formulas = {}
    for col in sheet.iter_cols(min_row=1, max_row=1, values_only=False):
        cell = col[0]
        if cell.value is not None and cell.data_type == 'f':  # Check if the cell contains a formula
            formulas[cell.coordinate] = cell.value
    return formulas

# Set layout configuration for the Streamlit page
st.set_page_config(layout='wide')
# Set title for the Streamlit application
st.title("Multiple-File ChatApp powered by LLM")

# Upload multiple files
input_files = st.sidebar.file_uploader("Upload your files", type=['csv', 'xlsm'], accept_multiple_files=True)

# Check if files are uploaded
if input_files:
    # Select a file from the uploaded files using a dropdown menu
    selected_file = st.selectbox("Select a file", [file.name for file in input_files])
    selected_index = [file.name for file in input_files].index(selected_file)

    # Load and display the selected file
    st.info("File uploaded successfully")
    selected_file = input_files[selected_index]
    
    if selected_file.name.endswith('.csv'):
        data = pd.read_csv(selected_file)
        st.dataframe(data.head(3), use_container_width=True)
    elif selected_file.name.endswith('.xlsm'):
        formulas = extract_excel_formulas(selected_file)
        st.write(formulas)

    # Enter the query for analysis
    st.info("Chat Below")
    input_text = st.text_area("Enter the query")

    # Perform analysis
    if input_text:
        if st.button("Chat with file"):
            st.info("Your Query: " + input_text)
            if selected_file.name.endswith('.csv'):
                result = chat_with_csv(data, input_text)
                st.success(result)
            elif selected_file.name.endswith('.xlsm'):
                st.warning("Formula extraction mode. Queries are not applicable for XLSM files.")
                st.write(formulas)




     
